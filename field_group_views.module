<?php
/**
 * @file
 * Provides primary Drupal hook implementations.
 *
 * @author Jimmy Berry ("boombatower", http://drupal.org/user/214218)
 */

/**
 * Implements hook_field_group_formatter_info().
 */
function field_group_views_field_group_formatter_info() {
  $info = array(
    'view' => array(
      'label' => t('View'),
      'description' => t('Display fieldgroup using a view.'),
      'instance_settings' => array('primary_field' => ''),
    ),
  );
  return array(
//     'form' => $info, @TODO Requires editting of fields in a view.
    'display' => $info,
  );
}

/**
 * Implements hook_field_group_format_settings().
 */
function field_group_views_field_group_format_settings($group) {
  $field_group_types = field_group_formatter_info();
  $mode = $group->mode == 'form' ? 'form' : 'display';
  $formatter = $field_group_types[$mode][$group->format_type];

  $form['instance_settings']['primary_field'] = array(
    '#title' => t('Primary field'),
    '#type' => 'select',
    '#options' => drupal_map_assoc($group->children),
    '#default_value' => $formatter['instance_settings']['primary_field'],
    '#weight' => 2,
  );
  if (isset($group->format_settings['instance_settings']['primary_field'])) {
    $form['instance_settings']['primary_field']['#default_value'] = $group->format_settings['instance_settings']['primary_field'];
  }
  return $form;
}

/**
 * Implements hook_field_group_format_summary().
 */
function field_group_views_field_group_format_summary($group) {
  if ($group->format_type == 'view') {
    return t('Determined by <em>!name</em> view.', array('!name' => field_group_views_name_display($group)));
  }
}

/**
 * Implements hook_form_FORM_ID_alter(): field_ui_display_overview_form.
 */
function field_group_views_form_field_ui_display_overview_form_alter(&$form, &$form_state) {
  $form['#submit'][] = 'field_group_views_view_create';
  $form['#submit'][] = 'field_group_views_views_base_table_set';
}

/**
 * Cycle through group and create views if necessary.
 */
function field_group_views_view_create($form, &$form_state) {
  if (!empty($form_state['field_group'])) {
    foreach ($form_state['field_group'] as $group) {
      if (!views_get_view($group->group_name)) {
        $view = views_new_view();
        $view->name = $group->group_name;
        // @TODO Add entity ID argument.
        foreach($group->children as $child) {
          // @TODO Add field to view.
        }
        $view->save();

        views_get_view($group->group_name, TRUE);
        drupal_set_message(t('Created <em>!name</em> view.', array('!name' => field_group_views_name_display($group))));
      }
    }
  }
}

/**
 * Cycles through groups and updates field setting for each child.
 */
function field_group_views_views_base_table_set($form, &$form_state) {
  if (!empty($form_state['field_group'])) {
    foreach ($form_state['field_group'] as $group) {
      foreach ($group->children as $field_name) {
        $field = field_info_field($field_name);
        if (!$field['settings']['views_base_table']) {
          $field['settings']['views_base_table'] = 1;
          field_update_field($field);
          drupal_set_message(t('Updated settings for <em>!name</em> field to expose as base table to Views module.', array('!name' => $field_name)));
        }
      }
    }
  }
}

/**
 * Implements hook_field_group_pre_render().
 */
function field_group_views_field_group_pre_render(&$element, $group, &$form) {
  if ($group->format_type == 'view') {
    // Since all fields are assumed to have the same object, take the first
    // field's object determine the entity ID key, and get the entity ID.
    $field = current($element);
    $info = entity_get_info($group->entity_type);
    $id = $field['#object']->{$info['entity keys']['id']};

    // Load the group view and override the fields display with the view.
    if ($view = views_get_view($group->group_name)) {
      $view->override_path = $_GET['q'];
      $element += array(
        '#markup' => $view->preview('default', array($id)),
        '#weight' => $group->weight,
      );
    }
  }
}

/**
 * Generate display text for a group view.
 *
 * @param $group
 *   Field group.
 * @return
 *   Text representing a group view, either a link or just the name.
 */
function field_group_views_name_display($group) {
  $name = $group->group_name;
  if (module_exists('views_ui') && views_get_view($name)) {
    $name = l($name, 'admin/structure/views/edit/' . $name);
  }
  return $name;
}

/**
 * Implements hook_views_data_alter().
 */
function field_group_views_views_data_alter(&$data) {
  // Cycle through field group information to find all groups of the display
  // mode and generate table join information for each group of fields.
  $info = field_group_info_groups();
  foreach ($info as $entity_type => $bundles) {
    foreach ($bundles as $bundle => $displays) {
      foreach ($displays as $mode => $groups) {
        // Currently only support views for the display mode.
        if ($mode != 'form') {
          foreach ($groups as $group_name => $group) {
            // Only process groups using the view format type.
            if ($group->format_type == 'view') {
              $primary_field = field_group_views_primary_field($group);
              foreach ($group->children as $field_name) {
                // Ignore the primary field if it is still in the children array.
                if ($field_name != $primary_field) {
                  views_field_add_multi_join($data, $field_name, $primary_field);
                }
              }
            }
          }
        }
      }
    }
  }
}

/**
 * Determine the primary field for a group.
 *
 * @param $group
 *   Field group object.
 */
function field_group_views_primary_field($group) {
  // If the primary_field is set then use it, otherwise default to the first.
  if (!($primary_field = $group->format_settings['instance_settings']['primary_field'])) {
    $primary_field = $group->children ? array_shift($group->children) : FALSE;
  }
  return $primary_field;
}
